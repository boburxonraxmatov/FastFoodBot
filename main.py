from aiogram import Bot, Dispatcher, executor
import os
from dotenv import load_dotenv
from aiogram.types import Message, CallbackQuery, LabeledPrice, ContentType
from geopy.geocoders import Nominatim
from work import *
from keyboards import *

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

storage = MemoryStorage()

load_dotenv()

bot = Bot(os.getenv('TOKEN'))

class GetLoc(StatesGroup):
    address = State()
    commit = State()

dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=['start'])
async def command_start(message: Message):
    chat_id = message.from_user.id
    """–ù–∞–¥–æ –ø–æ–ø—Ä–æ–±—ã–≤–∞—Ç—å –≤—ã—Ç–∞—â–∏—Ç—å –∏–∑ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
    –ï—Å–ª–∏ –æ–Ω –µ—Å—Ç—å - –ø–æ–∫–∞–∑–∞—Ç—å –µ–º—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = first_select_user(chat_id)
    if user:  # –ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π? –ù–µ –ø—É—Å—Ç–æ–π –ª–∏ –∫–æ—Ä—Ç–µ–∂?
        await message.answer('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')
        await main_menu(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é
    else:
        text = f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}, –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç PROWEB-–µ–¥–∞
–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç üëáüèøüëáüèøüëáüèø"""
        await message.answer(text, reply_markup=generate_phone_number())


@dp.message_handler(content_types=['contact'])
async def register(message: Message):
    chat_id = message.from_user.id
    full_name = message.from_user.full_name
    phone = message.contact.phone_number
    register_user(chat_id, full_name, phone)
    create_cart(chat_id)
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')
    await main_menu(message)


async def main_menu(message: Message):
    await message.answer('–ó–¥—Ä–∞–≤—Å–≤—É–π—Ç–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å', reply_markup=generate_main_menu())


@dp.message_handler(regexp=r'‚úÖ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')  # @dp.message_handler(lambda message: '‚úÖ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑' in message.text)
async def show_categories(message: Message):
    chat_id = message.chat.id
    await GetLoc.address.set()
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é ', reply_markup=generate_geolocation())


@dp.message_handler(content_types=[ContentType.LOCATION], state=GetLoc.address)
async def commit_address(message: Message, state: FSMContext):
    geolocator = Nominatim(user_agent='telegram')
    location = geolocator.reverse(f'{message.location.latitude}, {message.location.longitude}')
    chat_id = message.chat.id

    address = location.address
    save_address(address, chat_id)
    await GetLoc.next()
    await message.answer(f'''–≠—Ç–æ –≤–∞—à –∞–¥—Ä–µ—Å?
    {address}''', reply_markup=commit_button_address())


@dp.callback_query_handler(lambda call: 'yes' in call.data)
async def show_categories(call: CallbackQuery):
    categories = get_categories()
    chat_id = call.message.chat.id
    await bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞: ',
                           reply_markup=generate_categories_menu(categories))
    await bot.send_message(chat_id=chat_id, text='–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ—Ä–∑–∏–Ω—É!',
                           reply_markup=generate_main_menu())


@dp.callback_query_handler(lambda call: 'category' in call.data)
async def show_products(call: CallbackQuery):
    # category_1
    _, category_id = call.data.split('_')
    category_id = int(category_id)
    products = get_products_by_category(category_id)
    message_id = call.message.message_id
    await bot.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç: ',
                                chat_id=call.message.chat.id,
                                message_id=message_id,
                                reply_markup=generate_products_menu(products))


@dp.callback_query_handler(lambda call: 'main_menu' in call.data)
async def get_to_main_menu(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    categories = get_categories()
    await bot.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ',
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=generate_categories_menu(categories))


@dp.callback_query_handler(lambda call: 'product' in call.data)
async def show_detail_product(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    # product_1
    _, product_id = call.data.split('_')
    product_id = int(product_id)
    product = get_product(product_id)
    await bot.delete_message(chat_id, message_id)  # (—É –∫–æ–≥–æ, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    with open(product[5], mode='rb') as img:
        caption = f'''{product[2]}

–û–ø–∏—Å–∞–Ω–∏–µ: {product[4]}

–¶–µ–Ω–∞: {product[3]}

–í—ã–±—Ä–∞–Ω–æ: 1 - {product[3]}'''
        await bot.send_photo(chat_id=chat_id,
                             photo=img,
                             caption=caption,
                             reply_markup=generate_product_buttons(product[0], product[1]))


@dp.callback_query_handler(lambda call: 'change' in call.data)
async def change_quantity(call: CallbackQuery):
    _, product_id, quantity = call.data.split('_')
    message_id = call.message.message_id
    chat_id = call.message.chat.id
    product = get_product(product_id)
    caption = f'''{product[2]}

–û–ø–∏—Å–∞–Ω–∏–µ: {product[4]}

–¶–µ–Ω–∞: {product[3]}

–í—ã–±—Ä–∞–Ω–æ: {quantity} - {product[3] * int(quantity)} —Å—É–º'''
    if int(quantity) >= 1:
        await bot.edit_message_caption(chat_id=chat_id,
                                       message_id=message_id,
                                       caption=caption,
                                       reply_markup=generate_product_buttons(product[0], product[1], int(quantity)))


@dp.callback_query_handler(lambda call: 'back' in call.data)
async def back_to_category(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.delete_message(chat_id, message_id)
    _, category_id = call.data.split('_')
    products = get_products_by_category(category_id)
    await bot.send_message(chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç: ',
                           reply_markup=generate_products_menu(products))


@dp.callback_query_handler(lambda call: call.data.startswith('cart'))
async def add_product_cart(call: CallbackQuery):
    chat_id = call.message.chat.id
    print(chat_id)
    _, product_id, quantity = call.data.split('_')
    product_id, quantity = int(product_id), int(quantity)
    cart_id = get_user_cart_id(chat_id)
    print(cart_id)
    product = get_product(product_id)
    final_price = product[3] * quantity

    if insert_or_update_cart_product(cart_id, product[2], quantity, final_price):
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–æ–≤—ã–π - –≤–µ—Ä–Ω—É–ª–∞—Å—å True
        await bot.answer_callback_query(call.id, '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
    else:
        await bot.answer_callback_query(call.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')


@dp.message_handler(regexp=r'üõí –ö–æ—Ä–∑–∏–Ω–∞')
async def show_cart(message: Message, edit_message=False):  # –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∫–æ—Ä–∑–∏–Ω—ã
    chat_id = message.chat.id
    cart_id = get_user_cart_id(chat_id)  # –ü–æ–ª—É—á–µ–Ω–∏—É id –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        update_total_product_total_price(cart_id)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª-–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–µ–Ω—ã
    except Exception as e:  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - —Ç–æ –≤—ã–≤–µ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        print(e)
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
        return

    total_products, total_price = get_total_products_price(cart_id)

    cart_products = get_cart_product(cart_id)  # –í—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ –¥–∞–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã
    text = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: \n\n'
    i = 0
    for cart_product_id, product_name, quantity, final_price in cart_products:
        i += 1
        text += f'''{i}. {product_name}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price}\n\n'''

    text += f'''–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {0 if total_products == None else total_products}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤: {0 if total_price == None else total_price}'''

    if edit_message:
        await bot.edit_message_text(text, chat_id, message.message_id,
                                    reply_markup=generate_cart_product(cart_id, cart_products))
    else:
        await bot.send_message(chat_id, text,
                               reply_markup=generate_cart_product(cart_id, cart_products))

    # await bot.send_message(chat_id, text,
    #                        reply_markup=generate_cart_product(cart_id, cart_products))


@dp.callback_query_handler(lambda call: 'delete' in call.data)
async def delete(call: CallbackQuery):
    # delete_1
    _, cart_product_id = call.data.split('_')
    cart_product_id = int(cart_product_id)

    delete_cart_product(cart_product_id)
    await bot.answer_callback_query(call.id, '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω')
    await show_cart(message=call.message, edit_message=True)


@dp.callback_query_handler(lambda call: 'edit' in call.data)
async def change_cart_products(call: CallbackQuery):
    _, cart_product_id, quantity = call.data.split('_')
    cart_product_id, quantity = int(cart_product_id), int(quantity)
    if quantity == 0:
        delete_cart_product(cart_product_id)
    else:
        edit_cart_product_quantity(cart_product_id, quantity)

    await show_cart(message=call.message, edit_message=True)


@dp.callback_query_handler(lambda call: 'order' in call.data)
async def create_order(call: CallbackQuery):
    chat_id = call.message.chat.id
    _, cart_id = call.data.split('_')
    print(cart_id)
    cart_id = int(cart_id)
    total_products, total_price = get_total_products_price(cart_id)

    cart_products = get_cart_product(cart_id)  # –í—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ –¥–∞–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã
    text = '–í–∞—à –∑–∞–∫–∞–∑: \n\n'
    i = 0
    for cart_product_id, product_name, quantity, final_price in cart_products:
        i += 1
        text += f'''{i}. {product_name}
   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price}\n\n'''

    text += f'''–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {0 if total_products == None else total_products}
   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤: {0 if total_price == None else total_price}'''

    await bot.send_invoice(
        chat_id=chat_id,
        title=f'–ó–∞–∫–∞–∑ ‚Ññ{cart_id}',
        description=text,
        payload='bot-defined invoice payload',
        provider_token='398062629:TEST:999999999_F91D8F69C042267444B74CC0B3C747757EB0E065',
        currency='UZS',
        prices=[
            LabeledPrice(label='–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', amount=int(total_price * 100)),
            LabeledPrice(label='–î–æ—Å—Ç–∞–≤–∫–∞', amount=1500000)
        ]
    )
    await bot.send_message(chat_id, '–ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω')
    add_order(cart_id, chat_id, text, final_price)
    send = select_address()
    for user_id, full_name, telegram_id, phone, location in send:
        sendm = f'''
        –ò–º—è: {full_name}
        –õ–æ–∫–∞—Ü–∏—è: {location}
        –ó–∞–∫–∞–∑: {text}
        –ù–æ–º–µ—Ä: {phone}
        –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {cart_id}
        '''

    await bot.send_message(chat_id=-1001796087766, text=f'{sendm}', reply_markup=status(cart_id))


@dp.callback_query_handler(lambda call: 'ready' in call.data)
async def ready(call: CallbackQuery):
    _, cart_id = call.data.split('_')

    s = get_user_by_cart_id(cart_id)
    for telegram_id, full_name, phone in s:
        order_is_ready(cart_id)
        ready_text = f'''–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ !
–í–∞—à –∑–∞–∫–∞–∑  –ì–û–¢–û–í üòã
–ú–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑ –ø–æ–∫–∞–∑–∞–≤ —Å–≤–æ–π —á–µ–∫.
–ü–†–ò–Ø–¢–ù–û–ì–û –ê–ü–ü–ï–¢–ò–¢–ê'''

    await bot.send_message(chat_id=telegram_id,
                           text=f'{ready_text}')


@dp.message_handler(regexp=r'üìí –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–∞')
async def history(message: Message):
    chat_id = message.chat.id
    history = select_order(chat_id)
    for order_id, order_description, order_price, user_id in history:
        text_history = f'''–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:{order_id}
        {order_description}'''
    await bot.send_message(chat_id, text_history)


executor.start_polling(dp)

# –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
# C –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ + –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è + –ò–º—è
# –ù–∞–¥–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ó–ê–ö–ê–ó (–ö–æ—Ä–∑–∏–Ω–∞ + —Å—Ç—Ä–æ—á–∫–∏) + –°–¢–ê–¢–£–°
# –í –±–∞–∑—É –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
# –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ "–ò—Å—Ç–æ—Ä–∏—è" –≤—ã–≤–æ–¥–∏—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "–ó–ê–ö–ê–ó"
